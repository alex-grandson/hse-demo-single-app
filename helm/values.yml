
host: yadro.dev
namespace: prod-portal
serviceName: portal-umami
fqdn: portal-umami
image:
  repository: artifactory-spb.atmosphere.yadro.com/yadro-proxy-ghcr-io-docker/umami-software/umami
  tag: postgresql-v2.15.1
  pullPolicy: Always
  imagePullSecrets: artifactory-spb
replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPU: 80
  targetMemory: 70
rollingUpdate: {}
resources:
  limits:
    cpu: 300m
    memory: 600Mi
  requests:
    cpu: 300m
    memory: 600Mi
containerSecurityContext:
  enabled: false
  runAsUser: {}
  runAsGroup: {}
  # runAsNonRoot: false
  # privileged: true
  # readOnlyRootFilesystem: false
  # allowPrivilegeEscalation: true
podSecurityContext:
  enabled: false
  fsGroup: {}
  # fsGroupChangePolicy: 'Always'
persistence:
  enabled: false
  name: {}
  size: {}
  path: {}
  mountPath: {}
config:
  enabled: false
  name: {}
  path: {}
targetPort: 3000
servicePort: 3000
containerEnv:
- name: DATABASE_URL
  value: postgresql://umami:umami@portal-umami-db.yadro.dev:5432/umami
- name: DATABASE_TYPE
  value: postgresql
- name: APP_SECRET
  value: umamiUMAMI
- name: CLIENT_IP_HEADER
  value: x-no-ip
initContainers: []
initCommand: []
initArgs: []
healthProbes: true
healthProbesLivenessTimeout: 5
healthProbesReadinessTimeout: 5
healthProbeLivenessPeriodSeconds: 10
healthProbeReadinessPeriodSeconds: 10
healthProbeLivenessFailureThreshold: 5
healthProbeReadinessFailureThreshold: 3
healthProbeLivenessInitialDelay: 90
healthProbeReadinessInitialDelay: 60
typeStartupProbe:
  exec:
    enabled: false
  tcpSocket:
    enabled: false
  httpGet:
    enabled: true
probes:
  startupProbe:
    exec:
      command: {}
    tcpSocket:
      host: {}
      port: {}
    httpGet:
      path: /api/heartbeat
      port: 3000
service:
  enabled: true
ingress:
  enabled: true
  name: portal-umami
  annotations: {}
  port: 3000
  path: /
tls:
  enabled: true
backend:
  enabled: false
backend1:
  name: {}
  annotations: {}
  port: {}
  path: {}
backend2:
  name: {}
  annotations: {}
  port: {}
  path: {}
healers:
  crashloopBackoffInspect:
    enabled: true
  terminatingStatusInspect:
    enabled: true
installLatestImage:
  enabled: false
  name: {}
  schedule: {}
  successfulJobsHistoryLimit: {}
  failedJobsHistoryLimit: {}
  jobTemplate:
    backoffLimit: {}
    activeDeadlineSeconds: {}
    ttlSecondsAfterFinished: {}
    containers:
      name: {}
      image: {}
      command: []
cronJob:
  enabled: false
  name: {}
  schedule: {}
  successfulJobsHistoryLimit: {}
  failedJobsHistoryLimit: {}
  jobTemplate:
    backoffLimit: {}
    activeDeadlineSeconds: {}
    ttlSecondsAfterFinished: {}
    containers:
      name: {}
      image: {}
      command: []
        # - bash
        # - -c
        # - >-
        #   for p in $(kubectl get pods | grep Running | awk '{print $1}'); do kubectl describe pod $p;done
vault:
  enabled: true
  account: 'vault-account'
vaultSsl:
  enabled: true
  server: https://re-vault.atmosphere.yadro.com
  path: kv_storage
  account: vault-account
  auth:
    kubernetes:
      mountPath: k8s_atmosphere_spb
      role: dev_certificate_role
vaultEnv:
  enabled: false
  service: https://dev-portal-vault.a.yadro.com
  authpath: auth/rancher-spb-atmosphere-01
  role: dev-portal
  path: dev-portal/prod
  mount: /home/env
